% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sentiment.R
\name{sentiment_match}
\alias{sentiment_match}
\title{Sentiment Matching}
\usage{
sentiment_match(
  x = NULL,
  model = names(default_models),
  positive = sentiment.ai::default$positive,
  negative = sentiment.ai::default$negative,
  batch_size = 100,
  ...
)
}
\arguments{
\item{x}{A plain text vector or column name if data is supplied}

\item{model}{An embedding name from tensorflow-hub, some of which are
"en" (english large or not) and "multi" (multi-lingual large or not).}

\item{positive}{Custom positive words/terms to compare against
(e.g., "happy", "high quality", ...)}

\item{negative}{Custom negative words/terms to compare against
(e.g., "unhappy", "low quality", ...)}

\item{batch_size}{Size of batches to use. Larger numbers will be faster than
smaller numbers, but do not exhaust your system memory!}

\item{...}{Additional arguments passed to \code{\link[reticulate:conda-tools]{conda_install()}}
or \code{\link[reticulate:virtualenv-tools]{virtualenv_install()}}.}
}
\description{
Provides score and explanation, returns a single vector, and runs relatively
fast.
}
\examples{
\dontrun{
envname   <- "r-sentiment-ai"

# make sure to install sentiment ai (install_sentiment.ai)
# install_sentiment.ai(envname = envname,
#                      method  = "conda")

# running the model
mod_match <- sentiment_match(x       = airline_tweets$text,
                             model   = "en.large",
                             envname = envname)

# checking performance
pos_neg <- factor(airline_tweets$airline_sentiment,
                  levels = c("negative", "neutral", "positive"))
pos_neg <- (as.numeric(pos_neg) - 1) / 2
cosine(mod_match, pos_neg)

# you could also calculate accuracy/kappa
}

}
